["CREATE TABLE author (author_id INT NOT NULL COMMENT 'Unique identifier for the author in the system.',author_name VARCHAR(400) NOT NULL COMMENT 'Full name of the author.');",
"CREATE TABLE publisher (publisher_id INT NOT NULL COMMENT 'Unique identifier for the publisher in the system.',publisher_name VARCHAR(400) NOT NULL COMMENT 'Full name of the publisher.');",
"CREATE TABLE book_language (language_id INT NOT NULL COMMENT 'Unique identifier for the book language.',language_code VARCHAR(8) NOT NULL COMMENT 'Code representing the language .',language_name VARCHAR(50) NOT NULL COMMENT 'Name of the language .');",
"CREATE TABLE book (book_id INT NOT NULL COMMENT 'Unique identifier for the book in the system.',title VARCHAR(400) NOT NULL COMMENT 'Title of the book.',isbn13 VARCHAR(13) NOT NULL COMMENT 'ISBN-13 code of the book.',language_id INT NOT NULL COMMENT 'Foreign key referencing book_language.',num_pages INT NOT NULL COMMENT 'Number of pages in the book.',publication_date DATE NOT NULL COMMENT 'Date of publication of the book.',publisher_id INT NOT NULL COMMENT 'Foreign key referencing publisher.');",
"CREATE TABLE book_author (book_id INT NOT NULL COMMENT 'Foreign key referencing book.',author_id INT NOT NULL COMMENT 'Foreign key referencing author.');",
"CREATE TABLE address_status (status_id INT NOT NULL COMMENT 'Unique identifier for the address status.',address_status VARCHAR(30) NOT NULL COMMENT 'Description of address status .');",
"CREATE TABLE country (country_id INT NOT NULL COMMENT 'Unique identifier for the country in the system.',country_name VARCHAR(200) NOT NULL COMMENT 'Name of the country.');",
"CREATE TABLE address (address_id INT NOT NULL COMMENT 'Unique identifier for the address in the system.',street_number VARCHAR(10) NOT NULL COMMENT 'Number of the street address.',street_name VARCHAR(200) NOT NULL COMMENT 'Name of the street address.',city VARCHAR(100) NOT NULL COMMENT 'City associated with the address.',country_id INT NOT NULL COMMENT 'Foreign key referencing country.');",
"CREATE TABLE customer (customer_id INT NOT NULL COMMENT 'Unique identifier for the customer in the system.',first_name VARCHAR(200) NOT NULL COMMENT 'First name of the customer.',last_name VARCHAR(200) NOT NULL COMMENT 'Last name of the customer.',email VARCHAR(350) NOT NULL COMMENT 'Email address of the customer.');",
"CREATE TABLE customer_address (customer_id INT NOT NULL COMMENT 'Foreign key referencing customer.',address_id INT NOT NULL COMMENT 'Foreign key referencing address.',status_id INT NOT NULL COMMENT 'Foreign key referencing address_status.');",
"CREATE TABLE shipping_method (method_id INT NOT NULL COMMENT 'Unique identifier for the shipping method in the system.',method_name VARCHAR(100) NOT NULL COMMENT 'Name of the shipping method.',cost DECIMAL(6, 2) NOT NULL COMMENT 'Cost associated with the shipping method.');",
"CREATE TABLE cust_order (order_id SERIAL NOT NULL COMMENT 'Auto-generated unique identifier for the order.',order_date TIMESTAMP NOT NULL COMMENT 'Date and time of the order.',customer_id INT NOT NULL COMMENT 'Foreign key referencing customer.',shipping_method_id INT NOT NULL COMMENT 'Foreign key referencing shipping_method.',dest_address_id INT NOT NULL COMMENT 'Foreign key referencing address.');",
"CREATE TABLE order_status (status_id INT NOT NULL COMMENT 'Unique identifier for the order status in the system.',status_value VARCHAR(20) NOT NULL COMMENT 'Description of the order status .');",
"CREATE TABLE order_line (line_id SERIAL NOT NULL COMMENT 'Auto-generated unique identifier for the order line.',order_id INT NOT NULL COMMENT 'Foreign key referencing cust_order.',book_id INT NOT NULL COMMENT 'Foreign key referencing book.',price DECIMAL(5, 2) NOT NULL COMMENT 'Price of the book in the order.');",
"CREATE TABLE order_history (history_id SERIAL NOT NULL COMMENT 'Auto-generated unique identifier for order history.',order_id INT NOT NULL COMMENT 'Foreign key referencing cust_order.',status_id INT NOT NULL COMMENT 'Foreign key referencing order_status.',status_date TIMESTAMP NOT NULL COMMENT 'Date and time of the status change.');",
"CREATE TABLE country_movie (country_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for the country in the movie industry.',country_iso_code VARCHAR(10) DEFAULT NULL COMMENT 'ISO code of the country.',country_name VARCHAR(200) DEFAULT NULL COMMENT 'Name of the country.',CONSTRAINT pk_country PRIMARY KEY (country_id) COMMENT 'Primary key for the country table.');",
"CREATE TABLE gender_movie (gender_id INT NOT NULL COMMENT 'Unique identifier for the gender in the movie industry.',gender VARCHAR(20) DEFAULT NULL COMMENT 'Description of the gender (e.g., 'Male', 'Female').',    CONSTRAINT pk_gender PRIMARY KEY (gender_id) COMMENT 'Primary key for the gender table.');",
"CREATE TABLE genre_movies (genre_id INT NOT NULL COMMENT 'Unique identifier for the movie genre.',genre_name VARCHAR(100) DEFAULT NULL COMMENT 'Name of the movie genre.',CONSTRAINT pk_genre PRIMARY KEY (genre_id) COMMENT 'Primary key for the genre table.');",
"CREATE TABLE language_movies (language_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for the language in the movie industry.',language_code VARCHAR(10) DEFAULT NULL COMMENT 'Language code (e.g., 'en' for English).',language_name VARCHAR(500) DEFAULT NULL COMMENT 'Name of the language.',CONSTRAINT pk_language PRIMARY KEY (language_id) COMMENT 'Primary key for the language table.');",
"CREATE TABLE language_role_movies (role_id INT NOT NULL COMMENT 'Unique identifier for language roles in movies.',language_role VARCHAR(20) DEFAULT NULL COMMENT 'Role description (e.g., 'Subtitles').',CONSTRAINT pk_langrole PRIMARY KEY (role_id) COMMENT 'Primary key for the language role table.');",
"CREATE TABLE department_movies (department_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for movie departments.',department_name VARCHAR(200) DEFAULT NULL COMMENT 'Name of the movie department (e.g., 'Production').',CONSTRAINT pk_department PRIMARY KEY (department_id) COMMENT 'Primary key for the department table.');",
"CREATE TABLE keyword_movies (keyword_id INT NOT NULL COMMENT 'Unique identifier for movie keywords.',keyword_name VARCHAR(100) DEFAULT NULL COMMENT 'Name of the movie keyword (e.g., 'Action').',CONSTRAINT pk_keyword PRIMARY KEY (keyword_id) COMMENT 'Primary key for the keyword table.');",
"CREATE TABLE production_company_movies (company_id INT NOT NULL COMMENT 'Unique identifier for production companies in the movie industry.',company_name VARCHAR(200) DEFAULT NULL COMMENT 'Name of the production company.',CONSTRAINT pk_prodcomp PRIMARY KEY (company_id) COMMENT 'Primary key for the production company table.');",
"CREATE TABLE movie_company_movies (movie_id INT DEFAULT NULL COMMENT 'Foreign key referencing movies.movie (movie_id).',company_id INT DEFAULT NULL COMMENT 'Foreign key referencing movies.production_company (company_id).',CONSTRAINT fk_mc_comp FOREIGN KEY (company_id) REFERENCES movies.production_company (company_id) COMMENT 'Foreign key relationship to production companies.',CONSTRAINT fk_mc_movie FOREIGN KEY (movie_id) REFERENCES movies.movie (movie_id) COMMENT 'Foreign key relationship to movies.');",
"CREATE TABLE movie_genres_movies (movie_id INT DEFAULT NULL COMMENT 'Foreign key referencing movies.movie (movie_id).',genre_id INT DEFAULT NULL COMMENT 'Foreign key referencing movies.genre (genre_id).',CONSTRAINT fk_mg_genre FOREIGN KEY (genre_id) REFERENCES movies.genre (genre_id) COMMENT 'Foreign key relationship to movie genres.',CONSTRAINT fk_mg_movie FOREIGN KEY (movie_id) REFERENCES movies.movie (movie_id) COMMENT 'Foreign key relationship to movies.');",
"CREATE TABLE movie_keywords_movies (movie_id INT DEFAULT NULL COMMENT 'Foreign key referencing movies.movie (movie_id).',keyword_id INT DEFAULT NULL COMMENT 'Foreign key referencing movies.keyword (keyword_id).',CONSTRAINT fk_mk_keyword FOREIGN KEY (keyword_id) REFERENCES movies.keyword (keyword_id) COMMENT 'Foreign key relationship to movie keywords.',CONSTRAINT fk_mk_movie FOREIGN KEY (movie_id) REFERENCES movies.movie (movie_id) COMMENT 'Foreign key relationship to movies.');",
"CREATE TABLE movie_languages_movies (movie_id INT DEFAULT NULL COMMENT 'Foreign key referencing movies.movie (movie_id).',language_id INT DEFAULT NULL COMMENT 'Foreign key referencing movies.language (language_id).',language_role_id INT DEFAULT NULL COMMENT 'Foreign key referencing movies.language_role (role_id).',CONSTRAINT fk_ml_lang FOREIGN KEY (language_id) REFERENCES movies.language (language_id) COMMENT 'Foreign key relationship to movie languages.',CONSTRAINT fk_ml_movie FOREIGN KEY (movie_id) REFERENCES movies.movie (movie_id) COMMENT 'Foreign key relationship to movies.',CONSTRAINT fk_ml_role FOREIGN KEY (language_role_id) REFERENCES movies.language_role (role_id) COMMENT 'Foreign key relationship to language roles.');",
"CREATE TABLE production_country_movies (movie_id INT DEFAULT NULL COMMENT 'Foreign key referencing movies.movie (movie_id).',country_id INT DEFAULT NULL COMMENT 'Foreign key referencing movies.country (country_id).',CONSTRAINT fk_pc_country FOREIGN KEY (country_id) REFERENCES movies.country (country_id) COMMENT 'Foreign key relationship to movie production countries.',CONSTRAINT fk_pc_movie FOREIGN KEY (movie_id) REFERENCES movies.movie (movie_id) COMMENT 'Foreign key relationship to movies.');",
"CREATE TABLE medal_olympics (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for each medal in the Olympics.',medal_name VARCHAR(50) DEFAULT NULL COMMENT 'Name of the medal (e.g., 'Gold', 'Silver').',CONSTRAINT pk_medal PRIMARY KEY (id) COMMENT 'Primary key for the medal table.');",
"CREATE TABLE noc_region_olympics (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for the National Olympic Committee (NOC) region.',noc VARCHAR(5) DEFAULT NULL COMMENT 'NOC code.',region_name VARCHAR(200) DEFAULT NULL COMMENT 'Name of the NOC region.',CONSTRAINT pk_nocregion PRIMARY KEY (id) COMMENT 'Primary key for the NOC region table.');",
"CREATE TABLE sport_olympics (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for Olympic sports.',sport_name VARCHAR(200) DEFAULT NULL COMMENT 'Name of the Olympic sport.',PRIMARY KEY (id) COMMENT 'Primary key for the sport table.');",
"CREATE TABLE city_olympics (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for cities hosting the Olympics.',city_name VARCHAR(200) DEFAULT NULL COMMENT 'Name of the city.',PRIMARY KEY (id) COMMENT 'Primary key for the city table.');",
"CREATE TABLE event_olympics (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for Olympic events.',sport_id INT DEFAULT NULL COMMENT 'Foreign key referencing olympics.sport (id).',event_name VARCHAR(200) DEFAULT NULL COMMENT 'Name of the Olympic event.',CONSTRAINT pk_event PRIMARY KEY (id) COMMENT 'Primary key for the event table.',CONSTRAINT fk_ev_sp FOREIGN KEY (sport_id) REFERENCES olympics.sport (id) COMMENT 'Foreign key relationship to Olympic sports.');",
"CREATE TABLE games_olympics (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for Olympic games.',games_year INT DEFAULT NULL COMMENT 'Year of the Olympic games.',games_name VARCHAR(100) DEFAULT NULL COMMENT 'Name of the Olympic games.',season VARCHAR(100) DEFAULT NULL COMMENT 'Season of the games (e.g., 'Summer', 'Winter').',CONSTRAINT pk_games PRIMARY KEY (id) COMMENT 'Primary key for the games table.');",
"CREATE TABLE games_city_olympics (games_id INT DEFAULT NULL COMMENT 'Foreign key referencing olympics.games (id).',city_id INT DEFAULT NULL COMMENT 'Foreign key referencing olympics.city (id).',CONSTRAINT fk_gci_city FOREIGN KEY (city_id) REFERENCES olympics.city (id) COMMENT 'Foreign key relationship to cities hosting the games.',CONSTRAINT fk_gci_gam FOREIGN KEY (games_id) REFERENCES olympics.games (id) COMMENT 'Foreign key relationship to Olympic games.');",
"CREATE TABLE alignment_superhero (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for superhero alignments.',alignment VARCHAR(10) DEFAULT NULL COMMENT 'Alignment of the superhero (e.g., 'Good', 'Evil').',CONSTRAINT pk_alignment PRIMARY KEY (id) COMMENT 'Primary key for the alignment table.');",
"CREATE TABLE attribute_superhero (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for superhero attributes.',attribute_name VARCHAR(200) DEFAULT NULL COMMENT 'Name of the superhero attribute.',CONSTRAINT pk_attribute PRIMARY KEY (id) COMMENT 'Primary key for the attribute table.');",
"CREATE TABLE colour_superhero (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for superhero eye and hair colors.',colour VARCHAR(20) DEFAULT NULL COMMENT 'Eye or hair color of the superhero (e.g., 'Blue', 'Blond').',CONSTRAINT pk_colour PRIMARY KEY (id) COMMENT 'Primary key for the color table.');",
"CREATE TABLE comic_superhero (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for comic books featuring superheroes.',comic_name VARCHAR(200) DEFAULT NULL COMMENT 'Name of the comic book series.',issue INT DEFAULT NULL COMMENT 'Issue number of the comic.',publish_month INT DEFAULT NULL COMMENT 'Month of comic publication.',publish_year INT DEFAULT NULL COMMENT 'Year of comic publication.',CONSTRAINT pk_comic PRIMARY KEY (id) COMMENT 'Primary key for the comic book table.');",
"CREATE TABLE gender_superhero (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for superhero genders.',gender VARCHAR(20) DEFAULT NULL COMMENT 'Gender of the superhero (e.g., 'Male', 'Female').',CONSTRAINT pk_gender PRIMARY KEY (id) COMMENT 'Primary key for the gender table.');",
"CREATE TABLE publisher_superhero (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for comic book publishers featuring superheroes.'publisher_name VARCHAR(50) DEFAULT NULL COMMENT 'Name of the comic book publisher.',CONSTRAINT pk_publisher PRIMARY KEY (id) COMMENT 'Primary key for the publisher table.');",
"CREATE TABLE race_superhero (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for superhero races.',race VARCHAR(100) DEFAULT NULL COMMENT 'Race or ethnicity of the superhero (e.g., 'Human', 'Mutant').',CONSTRAINT pk_race PRIMARY KEY (id) COMMENT 'Primary key for the race table.');",
"CREATE TABLE superhero_superhero (-- Other attributes id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for superheroes.',superhero_name VARCHAR(200) DEFAULT NULL COMMENT 'Name of the superhero.',full_name VARCHAR(200) DEFAULT NULL COMMENT 'Full name of the superhero.',gender_id INT DEFAULT NULL COMMENT 'Foreign key referencing superhero.gender (id).',eye_colour_id INT DEFAULT NULL COMMENT 'Foreign key referencing superhero.colour (id) for eye color.',hair_colour_id INT DEFAULT NULL COMMENT 'Foreign key referencing superhero.colour (id) for hair color.',skin_colour_id INT DEFAULT NULL COMMENT 'Foreign key referencing superhero.colour (id) for skin color.',race_id INT DEFAULT NULL COMMENT 'Foreign key referencing superhero.race (id) for superhero race/ethnicity.',publisher_id INT DEFAULT NULL COMMENT 'Foreign key referencing superhero.publisher (id) for comic book publisher.',alignment_id INT DEFAULT NULL COMMENT 'Foreign key referencing superhero.alignment (id) for superhero alignment (e.g., 'Good', 'Evil').',height_cm INT DEFAULT NULL COMMENT 'Height of the superhero in centimeters.',weight_kg INT DEFAULT NULL COMMENT 'Weight of the superhero in kilograms.',CONSTRAINT pk_superhero PRIMARY KEY (id) COMMENT 'Primary key for the superhero table.',CONSTRAINT fk_sup_align FOREIGN KEY (alignment_id) REFERENCES superhero.alignment (id) COMMENT 'Foreign key relationship to superhero alignments.',CONSTRAINT fk_sup_eyecol FOREIGN KEY (eye_colour_id) REFERENCES superhero.colour (id) COMMENT 'Foreign key relationship to superhero eye colors.',CONSTRAINT fk_sup_gen FOREIGN KEY (gender_id) REFERENCES superhero.gender (id) COMMENT 'Foreign key relationship to superhero genders.',CONSTRAINT fk_sup_haircol FOREIGN KEY (hair_colour_id) REFERENCES superhero.colour (id) COMMENT 'Foreign key relationship to superhero hair colors.',CONSTRAINT fk_sup_pub FOREIGN KEY (publisher_id) REFERENCES superhero.publisher (id) COMMENT 'Foreign key relationship to comic book publishers.',CONSTRAINT fk_sup_race FOREIGN KEY (race_id) REFERENCES superhero.race (id) COMMENT 'Foreign key relationship to superhero races.',CONSTRAINT fk_sup_skincol FOREIGN KEY (skin_colour_id) REFERENCES superhero.colour (id) COMMENT 'Foreign key relationship to superhero skin colors.');",
"CREATE TABLE superpower_superhero (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for superhero superpowers.',power_name VARCHAR(200) DEFAULT NULL COMMENT 'Name of the superhero superpower.',CONSTRAINT pk_superpower PRIMARY KEY (id) COMMENT 'Primary key for the superpower table.');",
"CREATE TABLE hero_attribute_superhero (hero_id INT DEFAULT NULL COMMENT 'Foreign key referencing superhero.superhero (id).',attribute_id INT DEFAULT NULL COMMENT 'Foreign key referencing superhero.attribute (id).',attribute_value INT DEFAULT NULL COMMENT 'Value of the superhero attribute.',CONSTRAINT fk_hat_at FOREIGN KEY (attribute_id) REFERENCES superhero.attribute (id) COMMENT 'Foreign key relationship to superhero attributes.',CONSTRAINT fk_hat_hero FOREIGN KEY (hero_id) REFERENCES superhero.superhero (id) COMMENT 'Foreign key relationship to superheroes.');",
"CREATE TABLE hero_power_superhero (hero_id INT DEFAULT NULL COMMENT 'Foreign key referencing superhero.superhero (id).',power_id INT DEFAULT NULL COMMENT 'Foreign key referencing superhero.superpower (id).',CONSTRAINT fk_hpo_hero FOREIGN KEY (hero_id) REFERENCES superhero.superhero (id) COMMENT 'Foreign key relationship to superheroes.',CONSTRAINT fk_hpo_po FOREIGN KEY (power_id) REFERENCES superhero.superpower (id) COMMENT 'Foreign key relationship to superhero superpowers.');",
"CREATE TABLE country_uni (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for countries with universities.',country_name VARCHAR(100) DEFAULT NULL COMMENT 'Name of the country.',CONSTRAINT pk_country PRIMARY KEY (id) COMMENT 'Primary key for the country table.');",
"CREATE TABLE ranking_system_uni (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for university ranking systems.',system_name VARCHAR(100) DEFAULT NULL COMMENT 'Name of the ranking system.',CONSTRAINT pk_rs PRIMARY KEY (id) COMMENT 'Primary key for the ranking system table.');",
"CREATE TABLE ranking_criteria_uni (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for ranking criteria used in university rankings.',ranking_system_id INT DEFAULT NULL COMMENT 'Foreign key referencing universities.ranking_system (id).',criteria_name VARCHAR(200) DEFAULT NULL COMMENT 'Name of the ranking criteria.',CONSTRAINT pk_rc PRIMARY KEY (id) COMMENT 'Primary key for the ranking criteria table.',CONSTRAINT fk_rc_rs FOREIGN KEY (ranking_system_id) REFERENCES universities.ranking_system (id) COMMENT 'Foreign key relationship to ranking systems.');",
"CREATE TABLE university_uni (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for universities.',country_id INT DEFAULT NULL COMMENT 'Foreign key referencing universities.country (id).',university_name VARCHAR(200) DEFAULT NULL COMMENT 'Name of the university.',CONSTRAINT pk_uni PRIMARY KEY (id) COMMENT 'Primary key for the university table.',CONSTRAINT fk_uni_cnt FOREIGN KEY (country_id) REFERENCES universities.country (id) COMMENT 'Foreign key relationship to countries with universities.');",
"CREATE TABLE university_year_uni (university_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for universities in specific years.',year INT DEFAULT NULL COMMENT 'Year of the university data.',num_students INT DEFAULT NULL COMMENT 'Number of students in the university.',student_staff_ratio DECIMAL(6, 2) DEFAULT NULL COMMENT 'Student to staff ratio in the university.',pct_international_students INT DEFAULT NULL COMMENT 'Percentage of international students in the university.',pct_female_students INT DEFAULT NULL COMMENT 'Percentage of female students in the university.',CONSTRAINT fk_uy_uni FOREIGN KEY (university_id) REFERENCES universities.university (id) COMMENT 'Foreign key relationship to universities.');",
"CREATE TABLE university_ranking_year_uni (university_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COMMENT 'Unique identifier for university rankings in specific years.',ranking_criteria_id INT DEFAULT NULL COMMENT 'Foreign key referencing universities.ranking_criteria (id) for ranking criteria.',year INT DEFAULT NULL COMMENT 'Year of the university ranking data.',score INT DEFAULT NULL COMMENT 'Ranking score of the university.',CONSTRAINT fk_ury_rc FOREIGN KEY (ranking_criteria_id) REFERENCES universities.ranking_criteria (id) COMMENT 'Foreign key relationship to ranking criteria used for rankings.',CONSTRAINT fk_ury_uni FOREIGN KEY (university_id) REFERENCES universities.university (id) COMMENT 'Foreign key relationship to universities.');",]